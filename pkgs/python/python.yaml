extends: [autotools_package]

when pyver == '2.7':
    sources:
    - key: tar.gz:dbqx2hyvuoaksgovc5rqvhgyltqx5jqc
      url: https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz
#    sources:
#    - key: tar.gz:qkjjxfx5nl6i3kbywfera4dyyax2c5cl
#      url: http://python.org/ftp/python/2.7.11/Python-2.7.11.tgz
when pyver == '3.2':
    sources:
    - key: tar.gz:7qpecklofhkhn5uwga5mvyutvz5cgehq
      url: https://www.python.org/ftp/python/3.2.6/Python-3.2.6.tgz
when pyver == '3.3':
    sources:
    - key: tar.gz:bjmk2hy555hmzefrrmgeccr2bynert3w
      url: https://www.python.org/ftp/python/3.3.6/Python-3.3.6.tgz
when pyver == '3.4':
    sources:
    - key: tar.gz:rn2d6vxj4uf7ber3t2oelxmspqdr26vf
      url: https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz
when pyver == '3.5':
    sources:
    - key: tar.gz:nb7am7m7heo2mrkchr7nvaqfxlu5gxw4
      url: https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz
when pyver == '3.6':
    sources:
    - key: tar.gz:pemureyquxyx66wlvnsnompenxfaoauh
      url: https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz


dependencies:
  build: [zlib, bzip2, sqlite, openssl, launcher, ncurses, readline, gdbm, {{build_with}}]
  run: []

defaults:
  relocatable: false

build_stages:
  - when: platform == 'Cygwin'
    name: configure
    mode: update
    extra: ['--with-system-ffi', '--with-system-expat', '--with-dbmliborder=gdbm', '--with-libc=', '--with-libm=' ]

  - when: platform == 'Cygwin'
    name: cygwin-patch
    # patches adapted from https://github.com/cygwinports/python
    before: configure
    files:
      - '2.5.2-ctypes-util-find_library.patch'
      - '2.5.2-tkinter-x11.patch'
      - '2.6.5-FD_SETSIZE.patch'
      - '2.6.5-export-PySignal_SetWakeupFd.patch'
      - '2.6.5-ncurses-abi6.patch'
      - '2.7.3-dbm.patch'
      - '2.7.3-dylib.patch'
      - '2.7.3-getpath-exe-extension.patch'
      - '2.7.3-no-libm.patch'
    handler: bash
    bash: |
      patch -p0 < _hashdist/2.5.2-ctypes-util-find_library.patch
      patch -p0 < _hashdist/2.5.2-tkinter-x11.patch
      patch -p0 < _hashdist/2.6.5-FD_SETSIZE.patch
      patch -p0 < _hashdist/2.6.5-export-PySignal_SetWakeupFd.patch
      patch -p0 < _hashdist/2.6.5-ncurses-abi6.patch
      patch -p0 < _hashdist/2.7.3-dbm.patch
      patch -p0 < _hashdist/2.7.3-dylib.patch
      patch -p0 < _hashdist/2.7.3-getpath-exe-extension.patch
      patch -p0 < _hashdist/2.7.3-no-libm.patch

  - when: link == 'shared'
    name: configure
    mode: update
    append: {LDFLAGS: "-Wl,-rpath,${ARTIFACT}/lib"}
    extra: ['--enable-shared']

  - when: pyver == '3.4' or pyver == '3.5'
    name: configure
    mode: update
    extra: ['--without-ensurepip']

  - when: pyver == '2.7'
    name: configure
    mode: update
    extra: ['--enable-unicode=ucs4']

  - when: python_framework
    name: configure
    mode: update
    extra: ['--enable-framework=${ARTIFACT}']

  - when: python_framework
    name: install
    after: make
    mode: replace
    handler: bash
    bash: |
      make install PYTHONAPPSDIR=${ARTIFACT}
      rm -f ${ARTIFACT}/lib/*.la


  - when: python_framework
    name: add_links
    files: [sitecustomize.py]
    after: install
    before: test_modules
    handler: bash
    bash: |
      # This is needed to get site-packages to resolve correctly
      # replace the python binaries with a hardlink to the Python "Framework" binary
      rm ${ARTIFACT}/bin/python
      rm ${ARTIFACT}/bin/pythonw
      rm ${ARTIFACT}/bin/python2
      rm ${ARTIFACT}/bin/pythonw2
      rm ${ARTIFACT}/bin/python2.7
      rm ${ARTIFACT}/bin/pythonw2.7
      ln ${ARTIFACT}/Python.framework/Versions/{{pyver}}/Resources/Python.app/Contents/MacOS/Python ${ARTIFACT}/bin/python
      ln ${ARTIFACT}/Python.framework/Versions/{{pyver}}/Resources/Python.app/Contents/MacOS/Python ${ARTIFACT}/bin/pythonw
      ln ${ARTIFACT}/Python.framework/Versions/{{pyver}}/Resources/Python.app/Contents/MacOS/Python ${ARTIFACT}/bin/python2
      ln ${ARTIFACT}/Python.framework/Versions/{{pyver}}/Resources/Python.app/Contents/MacOS/Python ${ARTIFACT}/bin/pythonw2
      ln ${ARTIFACT}/Python.framework/Versions/{{pyver}}/Resources/Python.app/Contents/MacOS/Python ${ARTIFACT}/bin/python2.7
      ln ${ARTIFACT}/Python.framework/Versions/{{pyver}}/Resources/Python.app/Contents/MacOS/Python ${ARTIFACT}/bin/pythonw2.7

      cp -f _hashdist/sitecustomize.py ${ARTIFACT}/Python.framework/Versions/{{pyver}}/lib/python{{pyver}}/site-packages/sitecustomize.py


      # These are needed to get top-level installation root semantics when needed.
      ln -s ./Python.framework/Versions/{{pyver}}/include ${ARTIFACT}/include
      ln -s ./Python.framework/Versions/{{pyver}}/lib ${ARTIFACT}/lib
      ln -s ./Python.framework/Versions/{{pyver}}/share ${ARTIFACT}/share


# Make sure extension modules were built correctly. This should be part of the
# Python buildsystem, but unfortunately currently it will silently succeed even
# if any of the modules below fail.


  - when: pyver != '2.7'
    name: python_binary
    after: install
    before: test_modules
    handler: bash
    bash: |
      cp $ARTIFACT/bin/python3 $ARTIFACT/bin/python

  - name: test_modules
    after: install
    handler: bash
    bash: |
      echo "import math"
      $ARTIFACT/bin/python -c "import math"
      echo "    ok"

      # Test bzip2:
      echo "import bz2"
      $ARTIFACT/bin/python -c "import bz2"
      echo "    ok"

      # Make sure sufficient crypto support is available in the built python.
      echo "import hashlib"
      $ARTIFACT/bin/python -c "import hashlib"
      echo "    ok"

      # Make sure SSL works
      echo "import _ssl"
      $ARTIFACT/bin/python -c "import _ssl"
      echo "    ok"

      echo "import _hashlib"
      $ARTIFACT/bin/python -c "import _hashlib"
      echo "    ok"

      # Make sure HTTPS works
      echo "Test https support in httplib"
      $ARTIFACT/bin/python << EOF
      try:
          import httplib
      except ImportError:
          import http.client as httplib
      assert hasattr(httplib, 'HTTPSConnection')
      EOF
      echo "    ok"

      # Test sqlite3
      echo "import _sqlite3"
      $ARTIFACT/bin/python -c "import _sqlite3"
      echo "    ok"

      # Test ctypes
      echo "import _ctypes"
      $ARTIFACT/bin/python -c "import _ctypes"
      echo "    ok"


when_build_dependency:
  - set: PYTHON
    value: ${ARTIFACT}/bin/python
  - when: pyver != '2.7'
    set: PYTHONDONTWRITEBYTECODE
    value: 'yes'
  - prepend_path: PATH
    value: '${ARTIFACT}/bin'
  - prepend_path: PKG_CONFIG_PATH
    value: '${ARTIFACT}/lib/pkgconfig'

profile_links:
  - name: python_binaries
    before: everything
    launcher: 'bin/*'

  - name: python_packages
    link: 'lib/python{{pyver}}/site-packages/*'
    dirs: true

  - name: python_exclude
    after: python_packages
    before: everything
    exclude: 'lib/python{{pyver}}/site-packages/**/*'

  - name: exclude_python3_cache
    before: python_exclude
    link: 'lib/python{{pyver}}/site-packages/__pycache__/*'
